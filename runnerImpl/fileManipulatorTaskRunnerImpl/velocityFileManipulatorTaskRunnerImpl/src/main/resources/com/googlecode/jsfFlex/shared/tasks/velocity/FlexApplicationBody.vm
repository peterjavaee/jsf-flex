<fx:Script>
		<![CDATA[
		
		import com.googlecode.jsfFlex.communication.core.ComponentValueMapper;
	#foreach( $actionScriptImport in ${additionalApplicationScriptContent.getActionScriptImports()} )
		import $actionScriptImport;
	#end
		
		private static const AS_FORM_SUBMITTING_FUNCTION:String = "formSubmitting";
		private static const AS_POPULATE_INIT_VALUES_FUNCTION:String = "populateInitValues";
		
		private static const JS_COMMUNICATION_CORE_AM_READY_FUNCTION:String = "com.googlecode.jsfFlex.communication.core.amReady";
		
		private var compValMapper:ComponentValueMapper;
	#foreach( $dataGridScriptContent in ${additionalApplicationScriptContent.getDataGridScriptContent()} )
		#set( $dataGridVarRef = "${dataGridScriptContent.getDataGridId()}DataGridVarRef" )
		private var ${dataGridVarRef}:DataGridServiceRequest;
	#end
	
	#foreach( $eventHandler in ${additionalApplicationScriptContent.getEventHandler()} )
		#set( $eventHandlerRef = "${eventHandler.getCollectedUniqueId()}EventHandlerVarRef" )
		private var ${eventHandlerRef}:AbstractEventHandler;
	#end
	
	#set( $validationManagerScriptContent = ${additionalApplicationScriptContent.getValidationManagerScriptContent()} )
	
	#if ( ${validationManagerScriptContent.getValidationManagerValidatorIds().size()} > 0 )
	#set( $errorTextComponentId = ${validationManagerScriptContent.getErrorTextComponentId()} )
		private var validationManager:ValidationManager;
	#end
		
		private function initializeApp(event:Event):void {
			compValMapper = ComponentValueMapper.getInstance(this);
			compValMapper.initialize();
			
			ExternalInterface.addCallback(AS_FORM_SUBMITTING_FUNCTION, formSubmitting);
			ExternalInterface.addCallback(AS_POPULATE_INIT_VALUES_FUNCTION, populateInitValues);
			
			ComponentValueMapper.loadComponentValueMapperXML(this, this.componentValueMapperXMLLoaded);
		}
		
		private function componentValueMapperXMLLoaded(event:Event):void {
			
			var idObject:Object = ExternalInterface.call(JS_COMMUNICATION_CORE_AM_READY_FUNCTION, this.id);
			if(idObject != null){
			    compValMapper.populateInitValues(idObject);
			}
			
		#foreach( $dataGridScriptContent in ${additionalApplicationScriptContent.getDataGridScriptContent()} )
			#set( $dataGridVarRef = "${dataGridScriptContent.getDataGridId()}DataGridVarRef" )
			${dataGridVarRef} = new DataGridServiceRequest("${dataGridScriptContent.getDataGridId()}", ${dataGridScriptContent.getBatchColumnDataRetrievalSize()}, ${dataGridScriptContent.getMaxDataPartitionIndex()}, "${dataGridScriptContent.getFilterComponentId()}", "${dataGridScriptContent.getFilterColumnComponentId()}", "${dataGridScriptContent.getFilterEventListener()}");
			
			#foreach( $dataGridColumn in ${dataGridScriptContent.getDataGridColumns()} )
				${dataGridVarRef}.addDataGridColumServiceRequest("${dataGridColumn.getDataGridColumnId()}", "${dataGridColumn.getDataField()}", ${dataGridColumn.getColumnEditable()});
			#end
			
			${dataGridVarRef}.initialize();
		#end
		
		#foreach( $eventHandler in ${additionalApplicationScriptContent.getEventHandler()} )
			#set( $eventHandlerRef = "${eventHandler.getCollectedUniqueId()}EventHandlerVarRef" )
			${eventHandlerRef} = new ${eventHandler.getActionScriptConstructor()}("${eventHandler.getSrcId()}", "${eventHandler.getTgtId()}", "${eventHandler.getEventHandlerId()}", "${eventHandler.getEventName()}", ${eventHandler.getAdditionalArguments()});
		#end
		
		#foreach( $simpleDataProviderSetter in ${additionalApplicationScriptContent.getSimpleDataProviderSetter()} )
			#set( $simpleDataProviderSetterRef = "${simpleDataProviderSetter.getComponentId()}SimpleDataProviderSetterRef" )
			var ${simpleDataProviderSetterRef}:${simpleDataProviderSetter.getComponentTypeVariableDeclaration()} = this["${simpleDataProviderSetter.getComponentId()}"] as ${simpleDataProviderSetter.getComponentTypeCast()};
			#if( ${simpleDataProviderSetter.getInstanceCreate()} )
			${simpleDataProviderSetterRef}.dataProvider = new ${simpleDataProviderSetter.getInstanceCreate()}( ${simpleDataProviderSetter.getDataProviderContent()} );
			#else
			${simpleDataProviderSetterRef}.dataProvider = ${simpleDataProviderSetter.getDataProviderContent()} as ${simpleDataProviderSetter.getDataProviderCast()};
			#end
		#end
		
		#if ( ${validationManagerScriptContent.getValidationManagerValidatorIds().size()} > 0 )
			validationManager = new ValidationManager("${errorTextComponentId}");
			#foreach( $validationManagerValidatorId in ${validationManagerScriptContent.getValidationManagerValidatorIds()} )
			validationManager.addValidatorId("$validationManagerValidatorId");
			#end
		#end
			
		}
		
		public function populateInitValues(idObject:Object):void {
			if(idObject != null){
				compValMapper.populateInitValues(idObject);
			}
		}
		
		public function formSubmitting(idObject:Object):Object {
			var processResult:Object = null;
			
			#if ( ${validationManagerScriptContent.getValidationManagerValidatorIds().size()} > 0 )
			processResult = validationManager.validateComponents();
			if(processResult != null && processResult.result){
				return processResult;
			}
			#end
			
			#if ( ${additionalApplicationScriptContent.getDataGridScriptContent().size()} > 0 )
			    #foreach( $dataGridScriptContent in ${additionalApplicationScriptContent.getDataGridScriptContent()} )
			    #set( $dataGridVarRef = "${dataGridScriptContent.getDataGridId()}DataGridVarRef" )
			${dataGridVarRef}.flushCacheChanges();
			    #end
			#end
			
			processResult = compValMapper.getJSON(idObject);
			return processResult;
		}
		
		]]>
</fx:Script>

#if ( ${validationManagerScriptContent.getValidationManagerValidatorIds().size()} > 0 )
<mx:Text id="${errorTextComponentId}"
		
		#foreach( $errorComponentAttributeContainer in ${validationManagerScriptContent.getErrorComponentAttributeContainer()} )
			${errorComponentAttributeContainer.toTokenValueSyntax()}
		#end
		
		/>
#end