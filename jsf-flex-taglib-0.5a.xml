<?xml version="1.0" encoding="utf-8"?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
              version="2.0">
              
    <namespace>http://jsf-flex.googlecode.com</namespace>



    <!-- Component Tags -->
    <tag>
        <description><![CDATA[In order to simplify development and focus in bridging of JSF and Flex, all attributes 
of a component that is not specific to the JSF Flex project and not boundable to a bean will be 
provided as a sub-tag of the component. Meaning one can consider the component to be an XML Element  
node and this tag/component to be an Attribute node.]]></description>
        <tag-name>flexAttributeNode</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexAttributeNode</component-type>
        </component>
        <attribute>
           <description><![CDATA[Attribute name.]]></description>
           <name>name</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Attribute value.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAdditionalComponent</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAdditionalComponent</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAdditionalComponent</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>componentNameSpace</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's name.]]></description>
           <name>componentName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexApplication</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIApplication</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexApplication</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The mxmlPackageName for the application.]]></description>
           <name>mxmlPackageName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Allows user to provide Swf HTML Wrapper content. First content should have a key as object and value as JSONObject for values such as classid, codebase, and etcetera.]]></description>
           <name>swfHTMLWrapperContent</name>
           <type>org.json.JSONObject</type>
        </attribute>
        <attribute>
           <description><![CDATA[Additional xmlns in form of key/value where key is the prefix and the value being the url.]]></description>
           <name>providedAdditionalXmlnsMap</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will allow users to provide additional mxmlc commands during creation of the swf files. Note that it will be a simple mapping between a key and its value, meaning if there requires an equal sign, it is assumed that it has been provied within the key or its value.]]></description>
           <name>additionalMxmlcCommandArguments</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will allow users to provide additional swc commands during creation of the JSF Flex's system library.]]></description>
           <name>additionalSwccCommandArguments</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It must be an absolutePath to a filesystem where additional ActionScript and MXML files that are needed for the current SWF generation are located at.]]></description>
           <name>sourcePath</name>
           <type>java.util.Collection</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value represents Collection of additional SWC files. For instance, if one wishes to use additional open source projects or self projects that is archived as a SWC file, JSF Flex will unzip those files and place them within the same directory that JSF Flex's SWC file is extracted to to create links for the to be created SWF file.]]></description>
           <name>providedAdditionalExternalLibaryPath</name>
           <type>java.util.Collection</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It represents the defaultBgColor, surprise.]]></description>
           <name>defaultBgColor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It represents the max level of recursion that the Flash VM will allow.]]></description>
           <name>maxLvRecursion</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It represents the max script exec time that the Flash VM will allow.]]></description>
           <name>maxScriptExecTime</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It represents whether the creation of the SWF files will based incrementally.]]></description>
           <name>incremental</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It should bean absolutePath to a loadConfig XML file that specifies attributes for the mxmlc.]]></description>
           <name>loadConfig</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It simply is a metadata for the SWF.]]></description>
           <name>description</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It simply is a metadata for the SWF.]]></description>
           <name>creator</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It simply is a metadata for the SWF.]]></description>
           <name>publisher</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It simply is a metadata for the SWF.]]></description>
           <name>language</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will be passed to the mxmlc compiler when creating a SWF. It simply is a metadata for the SWF.]]></description>
           <name>date</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value will represent the FlexSDK path within user's workspace [i.e. if they wish to use a different Flex SDK or if they do not wish to wait for the long Flex SDK zip extraction].]]></description>
           <name>flexSDKPath</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Color of text for the error component. The default value is 0x0B333C.]]></description>
           <name>errorColor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Sets the antiAliasType property of internal TextFields for the error component. Possible values are normal and advanced.]]></description>
           <name>errorFontAntiAliasType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Name of the font to use for the error component. The default value is Verdana.]]></description>
           <name>errorFontFamily</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Sets the gridFitType property of internal TextFields for the error component that represent text in Flex controls. The possible values are none, pixel, and subpixel.]]></description>
           <name>errorFontGridFitType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Sets the sharpness property of internal TextFields for the error component that represent text in Flex controls. This property specifies the sharpness of the glyph edges. The possible values are Numbers from -400 through 400.]]></description>
           <name>errorFontSharpness</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Height of the text for the error component, in pixels. The default value is 10.]]></description>
           <name>errorFontSize</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determines whether the text for the error component is italic font. Recognized values are normal and italic.]]></description>
           <name>errorFontStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Sets the thickness property of internal TextFields for the error component that represent text in Flex controls. This property specifies the thickness of the glyph edges. The possible values are Numbers from -200 to 200.]]></description>
           <name>errorFontThickness</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determines whether the text for the error component is boldface. Recognized values are normal and bold.]]></description>
           <name>errorFontWeight</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Number of pixels between the error component's container's left border and the left edge of its content area.]]></description>
           <name>errorPaddingLeft</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Number of pixels between the error component's container's right border and the right edge of its content area.]]></description>
           <name>errorPaddingRight</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Alignment of text for the error component within a container. Possible values are left, right, or center.]]></description>
           <name>errorTextAlign</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determines whether the text for the error component is underlined. Possible values are none and underline.]]></description>
           <name>errorTextDecoration</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Offset of first line of text for the error component from the left side of the container, in pixels.]]></description>
           <name>errorTextIndent</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Title or caption displayed in the title bar.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Function to invoke after initialization.]]></description>
           <name>initialize</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexButton</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIButton</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexButton</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression that identifies an action listener method
to be invoked if this component is activated by the user. An action
listener method accepts a parameter of type javax.faces.event.ActionEvent
and returns void. The phase that this event is fired in can be controlled
via the immediate attribute.]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire. During normal event processing, action methods and
action listener methods are fired during the "invoke application"
phase of request processing. If this attribute is set to "true",
these methods are fired instead at the end of the "apply request
values" phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexButtonBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIButtonBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexButtonBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexCheckBox</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICheckBox</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCheckBox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether a toggle button is toggled on (true) or off (false).]]></description>
           <name>selected</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexColorPicker</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIColorPicker</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexColorPicker</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The value of the currently selected color in the SwatchPanel object.]]></description>
           <name>selectedColor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[AbstractFlexUIComboBox is a special case where the preserving of the state of the "text" field<br>
is held within the code. Main reason is because it extends FlexUISelectedIndexBase and there exists<br>
no reason to create an another base class to preserve both "selectedIndex" + "text".<br>]]></description>
        <tag-name>flexComboBox</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIComboBox</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexComboBox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Property that allows providing java.util.Collection dataBinding for dataProvider attribute [i.e. ComboBox]]]></description>
           <name>dataProviderCollection</name>
           <type>java.util.Collection</type>
        </attribute>
        <attribute>
           <description><![CDATA[Plain text that appears in the control.]]></description>
           <name>text</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDataGrid</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDataGrid</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDataGrid</renderer-type>
            <handler-class>com.googlecode.jsfFlex.facelet.tagHandler.AsynchronousEventGlueTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[A flag that indicates whether the control is editable.]]></description>
           <name>editable</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Provides the id of a component to retrieve the column filter.]]></description>
           <name>filterColumnComponentId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[List of beans for data binding to the component.]]></description>
           <name>bindingBeanList</name>
           <type>java.util.List</type>
        </attribute>
        <attribute>
           <description><![CDATA[The set of items this component displays.]]></description>
           <name>dataProvider</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Size denoting how many elements to retrieve by http service. If not defined will default to 50.]]></description>
           <name>batchColumnDataRetrievalSize</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>asynchronousEventGlueHandler</name>
           <method-signature>java.lang.Object myMethod( com.googlecode.jsfFlex.shared.model.event.AbstractEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[This value will provide a threshold where if the remaining data to be filtered exceeds it, 
the remaining entries will be queued in an another Thread while returning the current 
Thread with the needed content.]]></description>
           <name>queueFilterThreshold</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If additional beans can be added to the component and binding bean list size is 0, this attribute will be used to create additional beans to be added to the list. If the bean list size is > 0, then the first entry's className will be used to construct additional beans to be added to the list.]]></description>
           <name>bindingBeanClassName</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Maximum number of rows visible in the control.]]></description>
           <name>rowCount</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This value is associated with queueFilterThreshold. It represents the size of the queued list size 
[i.e. 1000 entries and if this entry is 250, then there will be 4 lists or Threads queued up]]]></description>
           <name>queuedFilterListBreakUpSize</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Provides the id of a component to retrieve the filtered value.]]></description>
           <name>filterComponentId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Event to associate for this Filter Listener.]]></description>
           <name>filterEventListener</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDataGridColumn</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDataGridColumn</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDataGridColumn</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[A flag that indicates whether the control is editable.]]></description>
           <name>editable</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name of the field or property in the data provider item associated with the column.]]></description>
           <name>dataField</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDateChooser</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDateChooser</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDateChooser</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Date selected in the control.]]></description>
           <name>selectedDate</name>
           <type>java.util.Calendar</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDateField</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDateField</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDateField</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Date selected in the control.]]></description>
           <name>selectedDate</name>
           <type>java.util.Calendar</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Plain text that appears in the control.]]></description>
           <name>text</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDropDownList</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDropDownList</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDropDownList</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexHRule</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIHRule</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexHRule</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexHScrollBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIHScrollBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexHScrollBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexHSlider</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIHSlider</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexHSlider</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Current value.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexHorizontalList</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIHorizontalList</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexHorizontalList</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexImage</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIImage</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexImage</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexLabel</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUILabel</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexLabel</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexLinkBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUILinkBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexLinkBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexLinkButton</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUILinkButton</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexLinkButton</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression that identifies an action listener method
to be invoked if this component is activated by the user. An action
listener method accepts a parameter of type javax.faces.event.ActionEvent
and returns void. The phase that this event is fired in can be controlled
via the immediate attribute.]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire. During normal event processing, action methods and
action listener methods are fired during the "invoke application"
phase of request processing. If this attribute is set to "true",
these methods are fired instead at the end of the "apply request
values" phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexList</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIList</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexList</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexMenuBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIMenuBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexMenuBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexNumericStepper</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUINumericStepper</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexNumericStepper</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Current value.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexPopUpAnchor</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPopUpAnchor</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPopUpAnchor</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexPopUpButton</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPopUpButton</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPopUpButton</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether a toggle button is toggled on (true) or off (false).]]></description>
           <name>selected</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexPopUpMenuButton</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPopUpMenuButton</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPopUpMenuButton</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether a toggle button is toggled on (true) or off (false).]]></description>
           <name>selected</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Note though FlexUIProgressBar extends AbstractFlexUIValueBase, it will simply retrieve the value during the post-back phase<br>
and NOT set the field of the Flex component as this field is read only.<br>]]></description>
        <tag-name>flexProgressBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIProgressBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexProgressBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Current value.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRadioButton</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRadioButton</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRadioButton</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Current value.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the name of the group to which this RadioButton control belongs, or specifies the value of the id property of a RadioButtonGroup control if this RadioButton is part of agroup defined by a RadioButtonGroup control.]]></description>
           <name>groupName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This will represent the selectedValue chosen for the RadioButtonGroup. It should be used for databinding, so to figure out which radioButton within the same groupNamehas been chosen. Meaning it serves no purpose for display, so rationally you shouldhave databinded to ONE of the RadioButton with the same groupName.]]></description>
           <name>selectedValue</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether a toggle button is toggled on (true) or off (false).]]></description>
           <name>selected</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRichEditableText</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRichEditableText</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRichEditableText</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Plain text that appears in the control.]]></description>
           <name>text</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRichText</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRichText</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRichText</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRichTextEditor</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRichTextEditor</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRichTextEditor</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the text displayed by the control.]]></description>
           <name>htmlText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the attribute used for binding on the server side for Input components. [i.e. TextInput and RichTextEditor]. Default is text and choices are eithertext or htmlText.]]></description>
           <name>textBinding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Plain text that appears in the control.]]></description>
           <name>text</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexScript</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIScript</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexScript</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexScroller</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIScroller</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexScroller</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSpacer</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISpacer</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSpacer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSpinner</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISpinner</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSpinner</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Current value.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSwfLoader</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISwfLoader</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSWFLoader</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexText</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIText</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexText</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTextArea</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITextArea</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTextArea</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the text displayed by the control.]]></description>
           <name>htmlText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the attribute used for binding on the server side for Input components. [i.e. TextInput and RichTextEditor]. Default is text and choices are eithertext or htmlText.]]></description>
           <name>textBinding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Plain text that appears in the control.]]></description>
           <name>text</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTextInput</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITextInput</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTextInput</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the text displayed by the control.]]></description>
           <name>htmlText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the attribute used for binding on the server side for Input components. [i.e. TextInput and RichTextEditor]. Default is text and choices are eithertext or htmlText.]]></description>
           <name>textBinding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Plain text that appears in the control.]]></description>
           <name>text</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTileList</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITileList</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTileList</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexToggleButton</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIToggleButton</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexToggleButton</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether a toggle button is toggled on (true) or off (false).]]></description>
           <name>selected</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexToggleButtonBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIToggleButtonBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexToggleButtonBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTree</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITree</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTree</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Selected Label.]]></description>
           <name>selectedLabel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexVRule</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIVRule</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexVRule</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexVScrollBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIVScrollBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexVScrollBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexVSlider</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIVSlider</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexVSlider</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Current value.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexVideoDisplay</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIVideoDisplay</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexVideoDisplay</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexVideoPlayer</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIVideoPlayer</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexVideoPlayer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<ul>
This component can have as its direct children components of :
		<li> AbstractFlexUIObjectListEntries </li>
		<li> AbstractFlexUIObjectElement </li>
</ul>

To have nesting of objects, one should have jf:flexObjectElement and <br>
jf:flexObjectListEntries tags as this component's children which have <br>
jf:flexObjectProperty or jf:flexObjectStaticProperty tag for properties. <br>]]></description>
        <tag-name>flexObject</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIObject</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexObject</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<ul>
This component can have as its direct children components of :
		<li> AbstractFlexUIObjectListEntries </li>
		<li> AbstractFlexUIObjectElement </li>
</ul>

To have nesting of objects, one should have jf:flexObjectElement and <br>
jf:flexObjectListEntries tags as this component's children which have <br>
jf:flexObjectProperty or jf:flexObjectStaticProperty tag for properties. <br>]]></description>
        <tag-name>flexArray</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIArray</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexArray</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexArrayCollection</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIArrayCollection</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexArrayCollection</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexListCollectionView</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIListCollectionView</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexListCollectionView</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<ul>
This component can have as its direct children components of :
		<li> AbstractFlexUIXMLListEntries </li>
		<li> AbstractFlexUIXMLStaticElement </li>
</ul>]]></description>
        <tag-name>flexXML</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXML</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexXML</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<ul>
This component can have as its direct children components of :
		<li> AbstractFlexUIXMLListEntries </li>
		<li> AbstractFlexUIXMLStaticElement </li>
</ul>]]></description>
        <tag-name>flexXMLList</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLList</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexXMLList</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexXMLListCollection</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLListCollection</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexXMLListCollection</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Since this component is out of the norm in relation to writing Flex content, it will perform <br>
the write of Flex content within the component rather than within a Renderer [meaning Renderer does <br>
not exist for this component]. Also when stated that it is writing Flex content, it technically is <br>
writing to AbstractFlexUIDataContainerBase's BufferedWriter.<br>

<ul>
This component can have following types of children :
		<li> AbstractFlexUIObjectProperty </li>
		<li> AbstractFlexUIObjectListEntries </li>
</ul>]]></description>
        <tag-name>flexObjectElement</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIObjectElement</component-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[This should be a child component of AbstractFlexUIObject or AbstractFlexUIObjectElement <br>
and should have AbstractFlexUIObjectElement as its children.]]></description>
        <tag-name>flexObjectListEntries</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIObjectListEntries</component-type>
        </component>
        <attribute>
           <description><![CDATA[List of beans for data binding to the component.]]></description>
           <name>bindingBeanList</name>
           <type>java.util.List</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexObjectProperty</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIObjectProperty</component-type>
        </component>
        <attribute>
           <description><![CDATA[Property of the object. This will allow fetching of the property name and property value dynamically [property provided as a static string representing the property name and its value being the reflected value of this static string].]]></description>
           <name>property</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexObjectStaticProperty</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIObjectStaticProperty</component-type>
        </component>
        <attribute>
           <description><![CDATA[Static name of the property.]]></description>
           <name>staticPropertyName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Static value of the property.]]></description>
           <name>staticPropertyValue</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexXMLAttribute</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLAttribute</component-type>
        </component>
        <attribute>
           <description><![CDATA[Property of the object. This will allow fetching of the property name and property value dynamically [property provided as a static string representing the property name and its value being the reflected value of this static string].]]></description>
           <name>property</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Since this component is out of the norm in relation to writing Flex content, it will perform <br>
the write of Flex content within the component rather than within a Renderer [meaning Renderer does <br>
not exist for this component]. Also when stated that it is writing Flex content, it technically is <br>
writing to AbstractFlexUIDataContainerBase's BufferedWriter. <br>

<ul>
This component can have following type of children :
		<li> AbstractFlexUIXMLAttribute </li>
		<li> AbstractFlexUIXMLStaticAttribute </li>
		<li> AbstractFlexUIXMLListEntries </li>
</ul>]]></description>
        <tag-name>flexXMLElement</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLElement</component-type>
        </component>
        <attribute>
           <description><![CDATA[Name of the node which will be fetched dynamically using reflection. This field should be a static string representing the name of the field within the binding bean.]]></description>
           <name>nodeName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Value of the node which will be fetched dynamically using reflection. This field should be a static string representing the value of the field within the binding bean.]]></description>
           <name>nodeValue</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<ul>
This should be a child component of :
		<li> AbstractFlexUIXMLList </li>
		<li> AbstractFlexUIXML </li>
		<li> AbstractFlexUIXMLStaticElement <li>

and should have AbstractFlexUIXMLElementBase as its children.]]></description>
        <tag-name>flexXMLListEntries</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLListEntries</component-type>
        </component>
        <attribute>
           <description><![CDATA[List of beans for data binding to the component.]]></description>
           <name>bindingBeanList</name>
           <type>java.util.List</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexXMLStaticAttribute</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLStaticAttribute</component-type>
        </component>
        <attribute>
           <description><![CDATA[Static name of the property.]]></description>
           <name>staticPropertyName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Static value of the property.]]></description>
           <name>staticPropertyValue</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Since this component is out of the norm in relation to writing Flex content, it will perform <br>
the write of Flex content within the component rather than within a Renderer [meaning Renderer does <br>
not exist for this component]. Also when stated that it is writing Flex content, it technically is <br>
writing to AbstractFlexUIDataContainerBase's BufferedWriter.<br>

<ul>
This component can have following types of children :
		<li> AbstractFlexUIXMLStaticAttribute </li>
		<li> AbstractFlexUIXMLListEntries </li>
</ul>]]></description>
        <tag-name>flexXMLStaticElement</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIXMLStaticElement</component-type>
        </component>
        <attribute>
           <description><![CDATA[Static name of the node.]]></description>
           <name>staticNodeName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Static value of the node.]]></description>
           <name>staticNodeValue</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexColumns</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIColumns</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexColumns</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDataProvider</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDataProvider</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDataProvider</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDeclarations</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDeclarations</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDeclarations</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexHTTPService</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIHTTPService</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexHTTPService</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRemoteObject</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRemoteObject</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRemoteObject</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWebService</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWebService</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWebService</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Since Accordion is written to maintain it's state [which container is chosen], it
will extend directly from FlexUISelectedIndexBase and not of a Container]]></description>
        <tag-name>flexAccordion</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAccordion</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAccordion</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexApplicationControlBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIApplicationControlBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexApplicationControlBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexBorderContainer</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIBorderContainer</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexBorderContainer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexBox</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIBox</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexBox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexCanvas</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICanvas</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCanvas</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexControlBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIControlBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexControlBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDataGroup</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDataGroup</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDataGroup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDividedBox</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDividedBox</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDividedBox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexGrid</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIGrid</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexGrid</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexGridItem</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIGridItem</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexGridItem</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Direction of the flow.]]></description>
           <name>direction</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexGridRow</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIGridRow</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexGridRow</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Direction of the flow.]]></description>
           <name>direction</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexGroup</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIGroup</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexGroup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexHGroup</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIHGroup</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexHGroup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexNavigatorContent</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUINavigatorContent</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexNavigatorContent</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexPanel</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPanel</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPanel</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSkinnableContainer</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISkinnableContainer</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSkinnableContainer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSkinnableDataContainer</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISkinnableDataContainer</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSkinnableDataContainer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTabBar</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITabBar</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTabBar</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTabNavigator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITabNavigator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTabNavigator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTile</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITile</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTile</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTileGroup</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITileGroup</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTileGroup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTitleWindow</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITitleWindow</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTitleWindow</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexVGroup</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIVGroup</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexVGroup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Since ViewStack is written to maintain it's state, it will extend directly from AbstractUIViewStackBase]]></description>
        <tag-name>flexViewStack</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIViewStack</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexViewStack</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index in the data provider of the selected item.]]></description>
           <name>selectedIndex</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which value change events should fire. During normal event processing, value change events are fired during the "invoke application" phase of request processing. If this attribute is set to true, these methods are fired instead at the end of the apply request values phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
If this value is true, and no input value is provided, the error
message javax.faces.component.UIInput.REQUIRED is posted.]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting FacesContext, UIComponent,
and Object parameters, and returning void, that validates the
component's local value.]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression, accepting a ValueChangeEvent parameter
and returning void. The specified method is invoked if this component
is modified. The phase that this handler is fired in can be controlled
via the immediate attribute.]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this is an
EL expression, the result of evaluating the expression must be an object that implements the
Converter interface.]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexCurrencyFormatter</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICurrencyFormatter</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCurrencyFormatter</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexDateFormatter</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDateFormatter</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDateFormatter</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexNumberFormatter</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUINumberFormatter</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexNumberFormatter</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexPhoneFormatter</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPhoneFormatter</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPhoneFormatter</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexZipCodeFormatter</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIZipCodeFormatter</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexZipCodeFormatter</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAddAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAddAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAddAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAddChildAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAddChildAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAddChildAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAddItemAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAddItemAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAddItemAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimate</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimate</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimate</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimateColor</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimateColor</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimateColor</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimateFilter</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimateFilter</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimateFilter</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimateProperty</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimateProperty</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimateProperty</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimateTransform</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimateTransform</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimateTransform</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimateTransform3D</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimateTransform3D</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimateTransform3D</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAnimateTransitionShader</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAnimateTransitionShader</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAnimateTransitionShader</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexBlur</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIBlur</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexBlur</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexCallAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICallAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCallAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexCrossFade</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICrossFade</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCrossFade</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDefaultListEffect</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDefaultListEffect</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDefaultListEffect</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDefaultTileListEffect</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDefaultTileListEffect</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDefaultTileListEffect</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexDissolve</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDissolve</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDissolve</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexFade</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIFade</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexFade</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexGlow</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIGlow</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexGlow</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexIris</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIIris</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexIris</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexMaskEffect</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIMaskEffect</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexMaskEffect</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexMove</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIMove</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexMove</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexMove3D</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIMove3D</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexMove3D</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexParallel</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIParallel</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexParallel</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexPause</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPause</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPause</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRemoveAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRemoveAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRemoveAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRemoveChildAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRemoveChildAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRemoveChildAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRemoveItemAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRemoveItemAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRemoveItemAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexResize</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIResize</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexResize</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRotate</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRotate</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRotate</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRotate3D</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRotate3D</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRotate3D</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexScale</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIScale</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexScale</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexScale3D</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIScale3D</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexScale3D</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSequence</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISequence</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSequence</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSetAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISetAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSetAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSetPropertyAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISetPropertyAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSetPropertyAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for the property.]]></description>
           <name>value</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name.]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSetStyleAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISetStyleAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSetStyleAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for the property.]]></description>
           <name>value</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name.]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSoundEffect</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISoundEffect</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSoundEffect</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTweenEffect</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITweenEffect</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTweenEffect</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexUnconstrainItemAction</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIUnconstrainItemAction</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexUnconstrainItemAction</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWipe</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWipe</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWipe</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWipeDirection</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWipeDirection</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWipeDirection</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWipeDown</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWipeDown</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWipeDown</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWipeLeft</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWipeLeft</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWipeLeft</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWipeRight</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWipeRight</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWipeRight</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexWipeUp</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIWipeUp</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexWipeUp</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexZoom</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIZoom</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexZoom</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAsynchronousDataUpdateEventListener</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAsynchronousDataUpdateEventListener</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAsynchronousDataUpdateEventListener</renderer-type>
            <handler-class>com.googlecode.jsfFlex.facelet.tagHandler.AsynchronousEventGlueTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[The id of the target component.]]></description>
           <name>eventHandlerTgtId</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Event to associate this listener for.]]></description>
           <name>eventListener</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The id of the source component.]]></description>
           <name>eventHandlerSrcId</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>asynchronousEventGlueHandler</name>
           <method-signature>java.lang.Object myMethod( com.googlecode.jsfFlex.shared.model.event.AbstractEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAsynchronousPropertyUpdateEventListener</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAsynchronousPropertyUpdateEventListener</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAsynchronousPropertyUpdateEventListener</renderer-type>
            <handler-class>com.googlecode.jsfFlex.facelet.tagHandler.AsynchronousEventGlueTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[The id of the target component.]]></description>
           <name>eventHandlerTgtId</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Event to associate this listener for.]]></description>
           <name>eventListener</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The id of the source component.]]></description>
           <name>eventHandlerSrcId</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>asynchronousEventGlueHandler</name>
           <method-signature>java.lang.Object myMethod( com.googlecode.jsfFlex.shared.model.event.AbstractEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[This list is to provide which property the user wishes to fetch from the source component back to the server side. The parameter for this method is in a form of a List to allow nesting. Meaning if the list is ["first", "second"], then following will be fetched sourceComp["first"]["second"]. This is to allow much flexibility.]]></description>
           <name>sourcePropertyList</name>
           <type>java.util.List</type>
        </attribute>
        <attribute>
           <description><![CDATA[This list is to provide which property the user wishes to update for the target component on the client side. The parameter for this method is in a form of a List to allow nesting. Meaning if the list is ["first", "second"], then following will be set sourceComp["first"]["second"] = val. This is to allow much flexibility.]]></description>
           <name>targetPropertyList</name>
           <type>java.util.List</type>
        </attribute>
        <attribute>
           <description><![CDATA[This ',' deliminated String is to provide which property the user wishes to fetch from the source component back to the server side. The parameter for this method is in a form of a String deliminated to allow nesting. Meaning if the String is "first, second", then following will be fetched sourceComp["first"]["second"]. This is to allow much flexibility.]]></description>
           <name>sourcePropertyDelim</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This ',' deliminated String is to provide which property the user wishes to update for the target component on the client side. The parameter for this method is in a form of a String deliminated to allow nesting. Meaning if the String is "first, second", then following will be set sourceComp["first"]["second"] = val. This is to allow much flexibility.]]></description>
           <name>targetPropertyDelim</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexBitmapImage</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIBitmapImage</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexBitmapImage</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexEllipse</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIEllipse</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexEllipse</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexGraphic</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIGraphic</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexGraphic</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexLine</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUILine</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexLine</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexPath</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPath</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPath</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRect</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRect</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRect</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRectangularDropShadow</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRectangularDropShadow</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRectangularDropShadow</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexAddChild</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIAddChild</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexAddChild</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexRemoveChild</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRemoveChild</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRemoveChild</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSetEventHandler</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISetEventHandler</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSetEventHandler</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name.]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSetProperty</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISetProperty</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSetProperty</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for the property.]]></description>
           <name>value</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name.]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexSetStyle</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISetStyle</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSetStyle</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for the property.]]></description>
           <name>value</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name.]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexState</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIState</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexState</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
           <description><![CDATA[The name.]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexStates</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIStates</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexStates</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>flexTransition</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUITransition</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexTransition</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Id of the component.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexCreditCardValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICreditCardValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCreditCardValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexCurrencyValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUICurrencyValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexCurrencyValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexDateValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIDateValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexDateValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexEmailValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIEmailValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexEmailValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexNumberValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUINumberValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexNumberValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexPhoneNumberValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIPhoneNumberValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexPhoneNumberValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexRegExpValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIRegExpValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexRegExpValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexSocialSecurityValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUISocialSecurityValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexSocialSecurityValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexStringValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIStringValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexStringValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[One thing to note about Flex Formatter and Validator is that they are not actually converters or validators<br>
respectively but actually are components. This is so because they perform the formatting and validation<br>
as Flex components on the client side and not on the server side.<br>]]></description>
        <tag-name>flexZipCodeValidator</tag-name>
        <component>
            <component-type>com.googlecode.jsfFlex.FlexUIZipCodeValidator</component-type>
            <renderer-type>com.googlecode.jsfFlex.FlexZipCodeValidator</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Map of attribute names provided as keys and values provided as values.]]></description>
           <name>componentAttributes</name>
           <type>java.util.Map</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component attributes provided in JSON Format.]]></description>
           <name>componentAttributesJSONFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Component's NameSpace.]]></description>
           <name>nameSpaceOverride</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>

   <!-- Converter tags -->

   <!-- Validator tags -->

   <!-- Behavior tags -->
    
   <!-- Single Tags -->

    <!-- Facelet Tags -->
</facelet-taglib>
